import random
import numpy as np

class RRT_Explorer:

    def __init__(self,grid,start):
        self.grid = grid
        self.start = start
        self.visited = []
        self.map = []

    def get_cam_scan(self,array, y, x):
        # Define the dimensions of the subgrid
        copy_arr = array
        left_right = 3
        front_back = 3
        
        # Calculate the indices for slicing
        start_x = max(0, x - front_back )
        end_x = min(array.shape[0], x + front_back)
        start_y = max(0, y - left_right)
        end_y = min(array.shape[1], y + left_right)

        # Extract the subgrid
        subgrid = copy_arr[start_x:end_x, start_y:end_y]

        return subgrid

    def generate_goals(self,num,init_point):
        goals = []
        dists = []
        current_pos = init_point
        for _ in range(num):
            xrand = random.randint(0,6)
            yrand = random.randint(0,6)
            dist = abs(xrand - current_pos[0]) + abs(yrand-current_pos[1])
            if dist >= 5:
                goals.append([xrand,yrand])
                dists.append(dist)        
        if len(goals) != 0:
            return [goals,dists]
        else :
            return None
    
    def E_RRT(self):
        curr_pos_x = self.start[0]
        curr_pos_y = self.start[1]
        for _ in range(5):
            goals = self.generate_goals(6,self.start)[0]
            list_domain = []
            print(goals)
            for i in goals:
                tx = i[0] - 3
                ty = i[1] - 3
                domain = []

                lidar_range = [3,3]
                reached = 0
                while reached == 0:
                    print("here")
                    lidar_scan = self.get_cam_scan(self.grid,curr_pos_x,curr_pos_y)
                    next_pos_x = curr_pos_x + random.randint(-1*lidar_range[0],lidar_range[0])
                    next_pos_y = curr_pos_y + random.randint(-1*lidar_range[1],lidar_range[1])
                    heuristic = abs(next_pos_x - tx) + abs(next_pos_y - ty)
                    cur_dist = abs(curr_pos_x - tx) + abs(curr_pos_y - ty)
                    print([curr_pos_y,curr_pos_x])
                    if heuristic < cur_dist and grid[next_pos_y][next_pos_x]!= 1: 
                        curr_pos_x = next_pos_x
                        curr_pos_y = next_pos_y
                        
                    if [curr_pos_x,curr_pos_y] not in domain:
                        domain.append([curr_pos_x,curr_pos_y])
                    
                    if cur_dist == 0:
                        reached = 1
                list_domain.append(domain)
                print("returning")
            return list_domain

obstacles =[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), 
 (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34),
     (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (1, 0), (1, 15), (1, 16), (1, 17), (1, 18), (1, 23), (1, 24), (1, 25), (1, 26), (1, 31),
     (1, 32), (1, 33), (1, 34), (1, 39), (2, 0), (2, 15), (2, 16), (2, 17), (2, 18), (2, 23), (2, 24), (2, 25), (2, 26), (2, 31), (2, 32), (2, 33),
      (2, 34), (2, 39), (2, 39), (3, 0), (3, 15), (3, 16), (3, 17), (3, 18), (3, 23), (3, 24), (3, 25), (3, 26), (3, 31), (3, 32), (3, 33), (3, 34), (3, 39), 
       (4, 0), (4, 15), (4, 16), (4, 17), (4, 18), (4, 23), (4, 24), (4, 25), (4, 26), (4, 31), (4, 32), (4, 33), (4, 34), (4, 39), (5, 0),
       (5, 10), (5, 15), (5, 16), (5, 17), (5, 18), (5, 23), (5, 24), (5, 25), (5, 26), (5, 31), (5, 32), (5, 33), (5, 34), (5, 39), (6, 0), (6, 10),
        (6, 15), (6, 16), (6, 17), (6, 18), (6, 23), (6, 24), (6, 25), (6, 26), (6, 31), (6, 32), (6, 33), (6, 34), (6, 39), (7, 0), (7, 10), (7, 15),
         (7, 16), (7, 17), (7, 18), (7, 23), (7, 24), (7, 25), (7, 26), (7, 31), (7, 32), (7, 33), (7, 34), (7, 39), (8, 0), (8, 10), (8, 15), (8, 16),
          (8, 17), (8, 18), (8, 23), (8, 24), (8, 25), (8, 26), (8, 31), (8, 32), (8, 33), (8, 34), (8, 39), (9, 0), (9, 10), (9, 15), (9, 16), (9, 17),
           (9, 18), (9, 23), (9, 24), (9, 25), (9, 26), (9, 31), (9, 32), (9, 33), (9, 34), (9, 39), (10, 0), (10, 10), (10, 15), (10, 16), (10, 17),
      (10, 18), (10, 23), (10, 24), (10, 25), (10, 26), (10, 31), (10, 32), (10, 33), (10, 34), (10, 39), (11, 0), (11, 10), (11, 15), (11, 16),
       (11, 17), (11, 18), (11, 23), (11, 24), (11, 25), (11, 26), (11, 31), (11, 32), (11, 33), (11, 34), (11, 39), (12, 0), (12, 10), (12, 15),
        (12, 16), (12, 17), (12, 18), (12, 23), (12, 24), (12, 25), (12, 26), (12, 31), (12, 32), (12, 33), (12, 34), (12, 39), (13, 0), (13, 10),
         (13, 15), (13, 16), (13, 17), (13, 18), (13, 23), (13, 24), (13, 25), (13, 26), (13, 31), (13, 32), (13, 33), (13, 34), (13, 39), (14, 0),
          (14, 10), (14, 15), (14, 16), (14, 17), (14, 18), (14, 23), (14, 24), (14, 25), (14, 26), (14, 31), (14, 32), (14, 33), (14, 34), (14, 39),
           (15, 0), (15, 10), (15, 15), (15, 16), (15, 17), (15, 18), (15, 23), (15, 24), (15, 25), (15, 26), (15, 31), (15, 32), (15, 33), (15, 34),
            (15, 39), (16, 0), (16, 10), (16, 15), (16, 16), (16, 17), (16, 18), (16, 23), (16, 24), (16, 25), (16, 26), (16, 31), (16, 32), (16, 33), (16, 34),
             (16, 39), (17, 0), (17, 10), (17, 15), (17, 16), (17, 17), (17, 18), (17, 23), (17, 24), (17, 25), (17, 26), (17, 31), (17, 32), (17, 33),
              (17, 34), (17, 39), (18, 0), (18, 10), (18, 15), (18, 16), (18, 17), (18, 18), (18, 23), (18, 24), (18, 25), (18, 26), (18, 31), (18, 32),
               (18, 33), (18, 34), (18, 39), (19, 0), (19, 10), (19, 15), (19, 16), (19, 17), (19, 18), (19, 23), (19, 24), (19, 25), (19, 26),
                (19, 31), (19, 32), (19, 33), (19, 34), (19, 39), (20, 0), (20, 10), (20, 15), (20, 16), (20, 17), (20, 18), (20, 23), (20, 24),
                 (20, 25), (20, 26), (20, 31), (20, 32), (20, 33), (20, 34), (20, 39), (21, 0), (21, 10), (21, 15), (21, 16), (21, 17), (21, 18),
                  (21, 23), (21, 24), (21, 25), (21, 26), (21, 31), (21, 32), (21, 33), (21, 34), (21, 39), (22, 0), (22, 10), (22, 39),
                   (23, 0), (23, 10), (23, 39), (24, 0), (24, 10), (24, 39), (25, 0), (25, 10), (26, 0), (26, 10), (27, 0), (27, 10), (28, 0),
                    (28, 10), (29, 0), (29, 1), (29, 2), (29, 3), (29, 4), (29, 5), (29, 6), (29, 7), (29, 8), (29, 9), (29, 10), (29, 10), (29, 11),
                     (29, 12), (29, 13), (29, 14), (29, 15), (29, 16), (29, 17), (29, 18), (29, 19), (29, 20), (29, 21), (29, 22), (29, 23), (29, 24), (29, 25),
                      (29, 26), (29, 27), (29, 28), (29, 29), (29, 30), (29, 31), (29, 32), (29, 33), (29, 34), (29, 35), (29, 36), (29, 37), (29, 38),
                      (6,4),(6,5),(7,4),(7,5),(8,4),(8,5),(13,6),(13,7),(14,6),(14,7),(15,6),(15,7),(16,6),(16,7),(22,3),(22,4),(23,3),(23,4),
                      (24,6),(24,7),(25,6),(25,7)]

grid = np.zeros((40,30))

for i in range(30):
    for j in range(40):
        if (i,j) in obstacles:
          grid[j][i] = 1
        else:
          grid[j][i] = 2

RRT = RRT_Explorer(grid,[11,2])
RRT.E_RRT()



        
