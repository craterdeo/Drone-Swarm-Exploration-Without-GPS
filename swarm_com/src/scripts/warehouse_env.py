#!usr/bin/env python3

import pygame
import sys
import math
import rospy

# Define constants
WIDTH, HEIGHT = 30, 40
CELL_SIZE = 20
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (0,255, 0)
BLUE = (150, 150, 255)

# Obstacles locations (as list of tuples)
# obstacles = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0),
#              (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29),
#              (0, 29), (1, 29), (2, 29), (3, 29), (4, 29), (5, 29), (6, 29), (7, 29), (8, 29), (9, 29), (10, 29), (11, 29), (12, 29), (13, 29), (14, 29), (15, 29), (16, 29), (17, 29), (18, 29), (19, 29), (20, 29), (21, 29), (22, 29), (23, 29), (24, 29),
#              (4, 4), (4, 5), (4, 6), (4, 7), (5, 4), (5, 5), (5, 6), (5, 7), (6, 4), (6, 5), (6, 6), (6, 7), (7, 4), (7, 5), (7, 6), (7, 7), (8, 4), (8, 5), (8, 6), (8, 7), (9, 4), (9, 5), (9, 6), (9, 7), (10, 4), (10, 5), (10, 6), (10, 7), (11, 4), (11, 5), (11, 6),
#              (11, 7), (12, 4), (12, 5), (12, 6), (12, 7), (13, 4), (13, 5), (13, 6), (13, 7), (14, 4), (14, 5), (14, 6), (14, 7), (15, 4), (15, 5), (15, 6), (15, 7), (16, 4), (16, 5), (16, 6), (16, 7), (17, 4), (17, 5), (17, 6), (17, 7), (18, 4), (18, 5), (18, 6), (18, 7)
#              ,(19, 4), (19, 5), (19, 6), (19, 7), (20, 4), (20, 5), (20, 6), (20, 7), (21, 4), (21, 5), (21, 6), (21, 7),(4, 12), (4, 13), (4, 14), (4, 15), (5, 12), (5, 13), (5, 14), (5, 15), (6, 12), (6, 13), (6, 14), (6, 15), (7, 12), (7, 13), (7, 14), (7, 15), (8, 12),
#              (8, 13), (8, 14), (8, 15), (9, 12), (9, 13), (9, 14), (9, 15), (10, 12), (10, 13), (10, 14), (10, 15), (11, 12), (11, 13), (11, 14), (11, 15), (12, 12), (12, 13), (12, 14), (12, 15), (13, 12), (13, 13), (13, 14), (13, 15), (14, 12), (14, 13), (14, 14), (14, 15),
#              (15, 12), (15, 13), (15, 14), (15, 15), (16, 12), (16, 13), (16, 14), (16, 15), (17, 12), (17, 13), (17, 14), (17, 15), (18, 12), (18, 13), (18, 14), (18, 15), (19, 12), (19, 13), (19, 14), (19, 15), (20, 12), (20, 13), (20, 14), (20, 15), (21, 12), (21, 13), (21, 14), (21, 15),
#              (4, 20), (4, 21), (4, 22), (4, 23), (5, 20), (5, 21), (5, 22), (5, 23), (6, 20), (6, 21), (6, 22), (6, 23), (7, 20), (7, 21), (7, 22), (7, 23), (8, 20), (8, 21), (8, 22), (8, 23), (9, 20), (9, 21), (9, 22), (9, 23), (10, 20), (10, 21), (10, 22), (10, 23), (11, 20), (11, 21), (11, 22),
#              (11, 23), (12, 20), (12, 21), (12, 22), (12, 23), (13, 20), (13, 21), (13, 22), (13, 23), (14, 20), (14, 21), (14, 22), (14, 23), (15, 20), (15, 21), (15, 22), (15, 23), (16, 20), (16, 21), (16, 22), (16, 23), (17, 20), (17, 21), (17, 22), (17, 23), (18, 20), (18, 21), (18, 22), (18, 23), 
#              (19, 20), (19, 21), (19, 22), (19, 23), (20, 20), (20, 21), (20, 22), (20, 23), (21, 20), (21, 21), (21, 22), (21, 23)]
obstacles =[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), 
 (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34),
     (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (1, 0), (1, 15), (1, 16), (1, 17), (1, 18), (1, 23), (1, 24), (1, 25), (1, 26), (1, 31),
     (1, 32), (1, 33), (1, 34), (1, 39), (2, 0), (2, 15), (2, 16), (2, 17), (2, 18), (2, 23), (2, 24), (2, 25), (2, 26), (2, 31), (2, 32), (2, 33),
      (2, 34), (2, 39), (2, 39), (3, 0), (3, 15), (3, 16), (3, 17), (3, 18), (3, 23), (3, 24), (3, 25), (3, 26), (3, 31), (3, 32), (3, 33), (3, 34), (3, 39), 
       (4, 0), (4, 15), (4, 16), (4, 17), (4, 18), (4, 23), (4, 24), (4, 25), (4, 26), (4, 31), (4, 32), (4, 33), (4, 34), (4, 39), (5, 0),
       (5, 10), (5, 15), (5, 16), (5, 17), (5, 18), (5, 23), (5, 24), (5, 25), (5, 26), (5, 31), (5, 32), (5, 33), (5, 34), (5, 39), (6, 0), (6, 10),
        (6, 15), (6, 16), (6, 17), (6, 18), (6, 23), (6, 24), (6, 25), (6, 26), (6, 31), (6, 32), (6, 33), (6, 34), (6, 39), (7, 0), (7, 10), (7, 15),
         (7, 16), (7, 17), (7, 18), (7, 23), (7, 24), (7, 25), (7, 26), (7, 31), (7, 32), (7, 33), (7, 34), (7, 39), (8, 0), (8, 10), (8, 15), (8, 16),
          (8, 17), (8, 18), (8, 23), (8, 24), (8, 25), (8, 26), (8, 31), (8, 32), (8, 33), (8, 34), (8, 39), (9, 0), (9, 10), (9, 15), (9, 16), (9, 17),
           (9, 18), (9, 23), (9, 24), (9, 25), (9, 26), (9, 31), (9, 32), (9, 33), (9, 34), (9, 39), (10, 0), (10, 10), (10, 15), (10, 16), (10, 17),
      (10, 18), (10, 23), (10, 24), (10, 25), (10, 26), (10, 31), (10, 32), (10, 33), (10, 34), (10, 39), (11, 0), (11, 10), (11, 15), (11, 16),
       (11, 17), (11, 18), (11, 23), (11, 24), (11, 25), (11, 26), (11, 31), (11, 32), (11, 33), (11, 34), (11, 39), (12, 0), (12, 10), (12, 15),
        (12, 16), (12, 17), (12, 18), (12, 23), (12, 24), (12, 25), (12, 26), (12, 31), (12, 32), (12, 33), (12, 34), (12, 39), (13, 0), (13, 10),
         (13, 15), (13, 16), (13, 17), (13, 18), (13, 23), (13, 24), (13, 25), (13, 26), (13, 31), (13, 32), (13, 33), (13, 34), (13, 39), (14, 0),
          (14, 10), (14, 15), (14, 16), (14, 17), (14, 18), (14, 23), (14, 24), (14, 25), (14, 26), (14, 31), (14, 32), (14, 33), (14, 34), (14, 39),
           (15, 0), (15, 10), (15, 15), (15, 16), (15, 17), (15, 18), (15, 23), (15, 24), (15, 25), (15, 26), (15, 31), (15, 32), (15, 33), (15, 34),
            (15, 39), (16, 0), (16, 10), (16, 15), (16, 16), (16, 17), (16, 18), (16, 23), (16, 24), (16, 25), (16, 26), (16, 31), (16, 32), (16, 33), (16, 34),
             (16, 39), (17, 0), (17, 10), (17, 15), (17, 16), (17, 17), (17, 18), (17, 23), (17, 24), (17, 25), (17, 26), (17, 31), (17, 32), (17, 33),
              (17, 34), (17, 39), (18, 0), (18, 10), (18, 15), (18, 16), (18, 17), (18, 18), (18, 23), (18, 24), (18, 25), (18, 26), (18, 31), (18, 32),
               (18, 33), (18, 34), (18, 39), (19, 0), (19, 10), (19, 15), (19, 16), (19, 17), (19, 18), (19, 23), (19, 24), (19, 25), (19, 26),
                (19, 31), (19, 32), (19, 33), (19, 34), (19, 39), (20, 0), (20, 10), (20, 15), (20, 16), (20, 17), (20, 18), (20, 23), (20, 24),
                 (20, 25), (20, 26), (20, 31), (20, 32), (20, 33), (20, 34), (20, 39), (21, 0), (21, 10), (21, 15), (21, 16), (21, 17), (21, 18),
                  (21, 23), (21, 24), (21, 25), (21, 26), (21, 31), (21, 32), (21, 33), (21, 34), (21, 39), (22, 0), (22, 10), (22, 39),
                   (23, 0), (23, 10), (23, 39), (24, 0), (24, 10), (24, 39), (25, 0), (25, 10), (26, 0), (26, 10), (27, 0), (27, 10), (28, 0),
                    (28, 10), (29, 0), (29, 1), (29, 2), (29, 3), (29, 4), (29, 5), (29, 6), (29, 7), (29, 8), (29, 9), (29, 10), (29, 10), (29, 11),
                     (29, 12), (29, 13), (29, 14), (29, 15), (29, 16), (29, 17), (29, 18), (29, 19), (29, 20), (29, 21), (29, 22), (29, 23), (29, 24), (29, 25),
                      (29, 26), (29, 27), (29, 28), (29, 29), (29, 30), (29, 31), (29, 32), (29, 33), (29, 34), (29, 35), (29, 36), (29, 37), (29, 38)]


print(len(obstacles))
start_x, start_y = 27, 27

# Initialize pygame
pygame.init()

# Set up the screen
screen = pygame.display.set_mode((WIDTH * CELL_SIZE, HEIGHT * CELL_SIZE))
pygame.display.set_caption("Grid with Obstacles and Robots")

# Function to calculate distance between two points
def distance(p1, p2):
    return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)

# Function to check if a cell is within range of the robot
def within_range(robot_pos, cell_pos, range_limit):
    return distance(robot_pos, cell_pos) <= range_limit

# Function to find the nearest empty cell within range
def find_nearest_empty(robot_pos, obstacles, range_limit):
    min_dist = float('inf')
    nearest_empty = None
    for x in range(WIDTH):
        for y in range(HEIGHT):
            if (x, y) not in obstacles and within_range(robot_pos, (x, y), range_limit):
                dist = distance(robot_pos, (x, y))
                if dist < min_dist:
                    min_dist = dist
                    nearest_empty = (x, y)
    return nearest_empty

# Main loop
while True:
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # Clear the screen
    screen.fill(WHITE)

    # Draw grid lines
    for x in range(0, WIDTH * CELL_SIZE, CELL_SIZE):
        pygame.draw.line(screen, BLACK, (x, 0), (x, HEIGHT * CELL_SIZE))
    for y in range(0, HEIGHT * CELL_SIZE, CELL_SIZE):
        pygame.draw.line(screen, BLACK, (0, y), (WIDTH * CELL_SIZE, y))

    # Draw obstacles
    for obstacle in obstacles:
        pygame.draw.rect(screen, BLACK, (obstacle[0] * CELL_SIZE, obstacle[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE))

    # Simulate Alidar for the center robot
    nearest_empty = find_nearest_empty((start_x, start_y), obstacles, 3)
    if nearest_empty:
        start_x, start_y = nearest_empty

    # Draw Lidar scan area
    # for x in range(start_x - 3, start_x + 4):
    #     for y in range(start_y - 3, start_y + 4):
    #         if (x, y) not in obstacles and (x, y) != (start_x, start_y):
    #             pygame.draw.rect(screen, BLUE, (x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE))

    # Draw swarm of robots (1 single cell robot and 4 around it)
    pygame.draw.rect(screen, RED, (start_x * CELL_SIZE, start_y * CELL_SIZE, CELL_SIZE, CELL_SIZE))  # Single cell robot
    for i, j in [(-1, 0), (1, 0), (0, -1), (0, 1)]:  # Coordinates for 4 surrounding robots
        pygame.draw.rect(screen, RED, ((start_x + i) * CELL_SIZE, (start_y + j) * CELL_SIZE, CELL_SIZE, CELL_SIZE))

    # Update the display
    pygame.display.flip()



