import rospy
import math
from door_detector import door_detector
import numpy as np
import cv2
from std_msgs.msg import Int32MultiArray
import pygame
import time
import sys


# def get_cam_scan(grid, x, y):
#         subgrid_size = 12
#         half_size = subgrid_size // 2
#         subgrid = grid[max(0, x - half_size): min(grid.shape[0], x + half_size + 1),
#                     max(0, y - half_size): min(grid.shape[1], y + half_size + 1)]
#         if subgrid.shape != (subgrid_size, subgrid_size):
#             # If the subgrid is not the expected size, pad it with zeros
#             padded_subgrid = np.zeros((subgrid_size, subgrid_size))
#             x_offset = half_size - min(half_size, x)
#             y_offset = half_size - min(half_size, y)
#             padded_subgrid[x_offset:x_offset + subgrid.shape[0], y_offset:y_offset + subgrid.shape[1]] = subgrid
#             return padded_subgrid
#         return subgrid
def get_subgrid(array, y, x):
    # Define the dimensions of the subgrid
    left_right = 6
    front_back = 3

    # Calculate the indices for slicing
    start_x = max(0, x - front_back)
    end_x = min(array.shape[0], x + front_back + 1)
    start_y = max(0, y - left_right)
    end_y = min(array.shape[1], y + left_right + 1)

    # Extract the subgrid
    subgrid = array[start_x:end_x, start_y:end_y]

    return subgrid

obstacles = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0),
             (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29),
             (0, 29), (1, 29), (2, 29), (3, 29), (4, 29), (5, 29), (6, 29), (7, 29), (8, 29), (9, 29), (10, 29), (11, 29), (12, 29), (13, 29), (14, 29), (15, 29), (16, 29), (17, 29), (18, 29), (19, 29), (20, 29), (21, 29), (22, 29), (23, 29), (24, 29),
             (4, 4), (4, 5), (4, 6), (4, 7), (5, 4), (5, 5), (5, 6), (5, 7), (6, 4), (6, 5), (6, 6), (6, 7), (7, 4), (7, 5), (7, 6), (7, 7), (8, 4), (8, 5), (8, 6), (8, 7), (9, 4), (9, 5), (9, 6), (9, 7), (10, 4), (10, 5), (10, 6), (10, 7), (11, 4), (11, 5), (11, 6),
             (11, 7), (12, 4), (12, 5), (12, 6), (12, 7), (13, 4), (13, 5), (13, 6), (13, 7), (14, 4), (14, 5), (14, 6), (14, 7), (15, 4), (15, 5), (15, 6), (15, 7), (16, 4), (16, 5), (16, 6), (16, 7), (17, 4), (17, 5), (17, 6), (17, 7), (18, 4), (18, 5), (18, 6), (18, 7)
             ,(19, 4), (19, 5), (19, 6), (19, 7), (20, 4), (20, 5), (20, 6), (20, 7), (21, 4), (21, 5), (21, 6), (21, 7),(4, 12), (4, 13), (4, 14), (4, 15), (5, 12), (5, 13), (5, 14), (5, 15), (6, 12), (6, 13), (6, 14), (6, 15), (7, 12), (7, 13), (7, 14), (7, 15), (8, 12),
             (8, 13), (8, 14), (8, 15), (9, 12), (9, 13), (9, 14), (9, 15), (10, 12), (10, 13), (10, 14), (10, 15), (11, 12), (11, 13), (11, 14), (11, 15), (12, 12), (12, 13), (12, 14), (12, 15), (13, 12), (13, 13), (13, 14), (13, 15), (14, 12), (14, 13), (14, 14), (14, 15),
             (15, 12), (15, 13), (15, 14), (15, 15), (16, 12), (16, 13), (16, 14), (16, 15), (17, 12), (17, 13), (17, 14), (17, 15), (18, 12), (18, 13), (18, 14), (18, 15), (19, 12), (19, 13), (19, 14), (19, 15), (20, 12), (20, 13), (20, 14), (20, 15), (21, 12), (21, 13), (21, 14), (21, 15),
             (4, 20), (4, 21), (4, 22), (4, 23), (5, 20), (5, 21), (5, 22), (5, 23), (6, 20), (6, 21), (6, 22), (6, 23), (7, 20), (7, 21), (7, 22), (7, 23), (8, 20), (8, 21), (8, 22), (8, 23), (9, 20), (9, 21), (9, 22), (9, 23), (10, 20), (10, 21), (10, 22), (10, 23), (11, 20), (11, 21), (11, 22),
             (11, 23), (12, 20), (12, 21), (12, 22), (12, 23), (13, 20), (13, 21), (13, 22), (13, 23), (14, 20), (14, 21), (14, 22), (14, 23), (15, 20), (15, 21), (15, 22), (15, 23), (16, 20), (16, 21), (16, 22), (16, 23), (17, 20), (17, 21), (17, 22), (17, 23), (18, 20), (18, 21), (18, 22), (18, 23), 
             (19, 20), (19, 21), (19, 22), (19, 23), (20, 20), (20, 21), (20, 22), (20, 23), (21, 20), (21, 21), (21, 22), (21, 23)]

grid = np.zeros((30,30))

for j in range(30):
    for i in range(30):
        if (i,j) in obstacles:
            grid[j][i] = 2
        else:
            grid[j][i] = 1
grid[27][18] = 20
# print(grid)
print(get_subgrid(grid,27,18))